// Generated by CoffeeScript 1.10.0
(function() {
  this.TodoMVC.module('TodoList.Views', function(Views, App, Backbone, Marionette, $, _) {
    Views.ItemView = Marionette.ItemView.extend({
      tagName: 'li',
      template: '#template-todoItemView',
      ui: {
        edit: '.edit'
      },
      events: {
        'click .destroy': 'destroy',
        'dbclick label': 'onEditClick',
        'keypress .edit': 'onEditKeypress',
        'click .toggle': 'toggle'
      },
      initialize: function() {
        return this.listenTo(this.model, 'change', this.render);
      },
      onRender: function() {
        this.$el.removeClass('active completed');
        if (this.model.get('completed')) {
          return this.$el.addClass('copleted');
        } else {
          return this.$el.addClass('active');
        }
      },
      destroy: function() {
        return this.model.destroy();
      },
      toggle: function() {
        return this.model.toggle().save();
      },
      onEditClick: function() {
        this.$el.addClass('editing');
        return this.ui.edit.focus();
      },
      onEditKeypress: function(evt) {
        var ENTER_KEY, todoText;
        ENTER_KEY = 13;
        todoText = this.ui.edit.val().trim();
        if (evt.which === ENTER_KEY && todoText) {
          this.model.set('title', todoText).save();
          return this.$el.removeClass('editing');
        }
      }
    });
    Views.ListView = Marionette.CompositeView.extend({
      template: '#template-todoListCompositeView',
      itemView: Views.ItemView,
      itemViewContainer: '#todo-list',
      ui: {
        toggle: '#toggle-all'
      },
      events: {
        'click #toggle-all': 'onToggleAllClick'
      },
      initialize: function() {
        return this.listenTo(this.collection, 'all', this.update);
      },
      onRender: function() {
        return this.update();
      },
      update: function() {
        var allCompleted, reduceCompleted;
        reduceCompleted = function(left, right) {
          return left && right.get('completed');
        };
        allCompleted = this.collection.reduce(reduceCompleted, true);
        this.ui.toggle.prop('checked', allCompleted);
        if (this.collection.length === 0) {
          return this.$el.parent().hide();
        } else {
          return this.$el.parent().show();
        }
      },
      onToggleAllClick: function(evt) {
        var isChecked;
        isChecked = evt.currentTarget.checked;
        return this.collection.each(function(todo) {
          return todo.save({
            completed: isChecked
          });
        });
      }
    });
    return App.vent.on('todoList:filter', function(filter) {
      filter || (filter = 'all');
      return $('#todoapp').attr('class', "filter-" + filter);
    });
  });

}).call(this);

//# sourceMappingURL=TodoMVC.TodoList.Views.js.map
